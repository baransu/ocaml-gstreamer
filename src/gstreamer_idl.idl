// include gst headers
quote(C,"#include \"gstreamer_inc.h\"");

// glib types

typedef unsigned int guint;
typedef int gint;
typedef char gchar;
typedef boolean gboolean;

// General functions

quote(C,"void ocaml_gst_init (int argc, char **argv) { gst_init(&argc, &argv); }")
void ocaml_gst_init(int argc, [string*, null_terminated, unique]char **argv);

void gst_version ([out]guint *major, [out]guint *minor, [out]guint *micro, [out]guint *nano);
[string] gchar *gst_version_string ();

// General types
// Note : use pGstElement instead of GstElement*, etc.

quote(C,"void check_null_pointer(void *p) { if (p == NULL) caml_raise_constant(*caml_named_value(\"gst_exn_null_pointer\"));  }");

quote(C,"void gst_finalize_element(pGstElement *o) { gst_object_unref(*o); }")
quote(C,"void gst_finalize_bin(pGstBin *o) { gst_object_unref(*o); }")
quote(C,"void gst_finalize_caps(pGstCaps *o) { gst_object_unref(*o); }")

typedef [abstract,ptr,finalize(gst_finalize_element),errorcheck(check_null_pointer)] void *pGstElement;
typedef [abstract,ptr,finalize(gst_finalize_bin),errorcheck(check_null_pointer)] void *pGstBin;
typedef [abstract,ptr,finalize(gst_finalize_caps),errorcheck(check_null_pointer)] void *pGstCaps;

// Element

quote(C,"void set_element_property_string (pGstElement e, char *n, char *v) { g_object_set (e, n, v, NULL); }")
void set_element_property_string (pGstElement e, [string]char *n, [string]char *v);

quote(C,"void set_element_property_bool (pGstElement e, char *n, gboolean v) { g_object_set (e, n, v, NULL); }")
void set_element_property_bool (pGstElement e, [string]char *n, gboolean v);

quote(C,"void set_element_property_int (pGstElement e, char *n, gint v) { g_object_set (e, n, v, NULL); }")
void set_element_property_int (pGstElement e, [string]char *n, gint v);

quote(C,"void set_element_caps (pGstElement e, pGstCaps c) { g_object_set (e, \"caps\", c, NULL); }")
void set_element_caps (pGstElement e, pGstCaps c);

gboolean gst_element_link (pGstElement src, pGstElement dest);

typedef enum {
  GST_STATE_VOID_PENDING        = 0,
  GST_STATE_NULL                = 1,
  GST_STATE_READY               = 2,
  GST_STATE_PAUSED              = 3,
  GST_STATE_PLAYING             = 4
} GstState;

typedef enum {
  GST_STATE_CHANGE_FAILURE             = 0,
  GST_STATE_CHANGE_SUCCESS             = 1,
  GST_STATE_CHANGE_ASYNC               = 2,
  GST_STATE_CHANGE_NO_PREROLL          = 3
} GstStateChangeReturn;

GstStateChangeReturn gst_element_set_state (pGstElement element, GstState state);

// Element factory

pGstElement gst_element_factory_make ([string]const gchar *factoryname, [string]const gchar *name);

// Pipeline

pGstElement gst_pipeline_new ([string]const gchar *name);

// Bin

quote(C,"pGstBin gst_bin_of_element(pGstElement e) { gst_object_ref(e); return (pGstBin)e; };");
pGstBin gst_bin_of_element(pGstElement e);

gboolean gst_bin_add (pGstBin bin, pGstElement element);

pGstElement gst_bin_get_by_name (pGstBin bin, [string]const gchar *name);

// Caps

[string] gchar * gst_caps_to_string (pGstCaps caps);
pGstCaps gst_caps_from_string ([string]const gchar *string);

// Parse
quote(C,"GstElement* parse_launch(const gchar *pipeline_description) { return gst_parse_launch(pipeline_description, NULL); };");
pGstElement parse_launch ([string]const gchar *pipeline_description);

// App_sink
quote(C," \
value caml_app_sink_pull_buffer(value as){ \
GstBuffer *gstbuf; \
GstElement *e; \
struct camlidl_ctx_struct _ctxs = { CAMLIDL_TRANSIENT, NULL }; \
camlidl_ctx _ctx = &_ctxs; \
camlidl_ml2c_gstreamer_idl_pGstElement(as, &e, _ctx); \
gstbuf = gst_app_sink_pull_buffer(GST_APP_SINK(e)); \
intnat len = gstbuf->size; \
char *data = malloc(len); \
memcpy(data, gstbuf->data, len); \
gst_buffer_unref (gstbuf); \
value ba = caml_ba_alloc(CAML_BA_MANAGED | CAML_BA_C_LAYOUT | CAML_BA_UINT8, 1, data, &len); \
return ba; \
}");

quote(C," \
value caml_app_sink_pull_buffer_string(value as){ \
GstBuffer *gstbuf; \
GstElement *e; \
struct camlidl_ctx_struct _ctxs = { CAMLIDL_TRANSIENT, NULL }; \
camlidl_ctx _ctx = &_ctxs; \
camlidl_ml2c_gstreamer_idl_pGstElement(as, &e, _ctx); \
gstbuf = gst_app_sink_pull_buffer(GST_APP_SINK(e)); \
intnat len = gstbuf->size; \
value s = caml_alloc_string(len); \
memcpy(String_val(s), gstbuf->data, len); \
gst_buffer_unref (gstbuf); \
return s; \
}");
