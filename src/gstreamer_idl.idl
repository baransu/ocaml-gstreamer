// glib types

typedef unsigned int guint;
typedef int gint;
typedef char gchar;
typedef boolean gboolean;

// General functions

void gst_init(int argc, [string*, null_terminated, unique]char **argv);
void gst_version ([out]guint *major, [out]guint *minor, [out]guint *micro, [out]guint *nano);
[string] gchar *gst_version_string ();

// General types
// Note : use GstElement instead of GstElement*, etc.

quote(C,"void check_null_pointer(void *p) { if (p == NULL) caml_raise_constant(*caml_named_value(\"gst_exn_null_pointer\"));  }");

typedef [abstract,ptr,finalize(gst_object_unref),errorcheck(check_null_pointer)] void *GstElement;
typedef [abstract,ptr,finalize(gst_object_unref),errorcheck(check_null_pointer)] void *GstBin;
typedef [abstract,ptr,finalize(gst_object_unref),errorcheck(check_null_pointer)] void *GstCaps;

// Element

quote(C,"void set_element_property_string (GstElement e, char *n, char *v) { g_object_set (e, n, v, NULL); }")
void set_element_property_string (GstElement e, [string]char *n, [string]char *v);

quote(C,"void set_element_property_bool (GstElement e, char *n, gboolean v) { g_object_set (e, n, v, NULL); }")
void set_element_property_bool (GstElement e, [string]char *n, gboolean v);

quote(C,"void set_element_property_int (GstElement e, char *n, gint v) { g_object_set (e, n, v, NULL); }")
void set_element_property_int (GstElement e, [string]char *n, gint v);

quote(C,"void set_element_caps (GstElement e, GstCaps c) { g_object_set (e, \"caps\", c, NULL); }")
void set_element_caps (GstElement e, GstCaps c);

gboolean gst_element_link (GstElement src, GstElement dest);

typedef enum {
  State_void_pending        = 0,
  State_null                = 1,
  State_ready               = 2,
  State_paused              = 3,
  State_playing             = 4
} GstState;

typedef enum {
  State_change_failure             = 0,
  State_change_success             = 1,
  State_change_async               = 2,
  State_change_no_preroll          = 3
} GstStateChangeReturn;

GstStateChangeReturn gst_element_set_state (GstElement element, GstState state);

// Element factory

GstElement gst_element_factory_make ([string]const gchar *factoryname, [string]const gchar *name);

// Pipeline

GstElement gst_pipeline_new ([string]const gchar *name);

// Bin

quote(C,"GstBin gst_bin_of_element(GstElement e) { return (GstBin)e; };");
GstBin gst_bin_of_element(GstElement e);

gboolean gst_bin_add (GstBin bin, GstElement element);

// Caps

[string] gchar * gst_caps_to_string (GstCaps caps);
GstCaps gst_caps_from_string ([string]const gchar *string);
